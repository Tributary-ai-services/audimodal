apiVersion: v1
kind: ServiceAccount
metadata:
  name: eaiingest-serviceaccount
  namespace: eaiingest
  labels:
    app.kubernetes.io/name: eaiingest
    app.kubernetes.io/component: serviceaccount
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: eaiingest-role
  namespace: eaiingest
  labels:
    app.kubernetes.io/name: eaiingest
    app.kubernetes.io/component: rbac
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: eaiingest-rolebinding
  namespace: eaiingest
  labels:
    app.kubernetes.io/name: eaiingest
    app.kubernetes.io/component: rbac
subjects:
- kind: ServiceAccount
  name: eaiingest-serviceaccount
  namespace: eaiingest
roleRef:
  kind: Role
  name: eaiingest-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: eaiingest-cluster-role
  labels:
    app.kubernetes.io/name: eaiingest
    app.kubernetes.io/component: rbac
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/metrics"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["nodes", "pods"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: eaiingest-cluster-rolebinding
  labels:
    app.kubernetes.io/name: eaiingest
    app.kubernetes.io/component: rbac
subjects:
- kind: ServiceAccount
  name: eaiingest-serviceaccount
  namespace: eaiingest
roleRef:
  kind: ClusterRole
  name: eaiingest-cluster-role
  apiGroup: rbac.authorization.k8s.io

---
# Network Policy to secure pod-to-pod communication
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: eaiingest-network-policy
  namespace: eaiingest
  labels:
    app.kubernetes.io/name: eaiingest
    app.kubernetes.io/component: security
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: eaiingest
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: eaiingest
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: nginx
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# Pod Security Policy (if enabled in cluster)
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: eaiingest-psp
  labels:
    app.kubernetes.io/name: eaiingest
    app.kubernetes.io/component: security
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'