apiVersion: apps/v1
kind: Deployment
metadata:
  name: eaiingest-app
  namespace: eaiingest
  labels:
    app.kubernetes.io/name: eaiingest
    app.kubernetes.io/component: application
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: eaiingest
      app.kubernetes.io/component: application
  template:
    metadata:
      labels:
        app.kubernetes.io/name: eaiingest
        app.kubernetes.io/component: application
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: eaiingest-serviceaccount
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: eaiingest
        image: eaiingest:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: EAI_ENV
          value: "production"
        - name: EAI_LOG_LEVEL
          value: "info"
        - name: EAI_CONFIG_PATH
          value: "/app/config/app.yaml"
        - name: EAI_DB_HOST
          valueFrom:
            secretKeyRef:
              name: eaiingest-secrets
              key: db-host
        - name: EAI_DB_PORT
          valueFrom:
            secretKeyRef:
              name: eaiingest-secrets
              key: db-port
        - name: EAI_DB_NAME
          valueFrom:
            secretKeyRef:
              name: eaiingest-secrets
              key: db-name
        - name: EAI_DB_USER
          valueFrom:
            secretKeyRef:
              name: eaiingest-secrets
              key: db-username
        - name: EAI_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: eaiingest-secrets
              key: db-password
        - name: EAI_REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: eaiingest-secrets
              key: redis-host
        - name: EAI_REDIS_PORT
          valueFrom:
            secretKeyRef:
              name: eaiingest-secrets
              key: redis-port
        - name: EAI_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: eaiingest-secrets
              key: redis-password
        - name: EAI_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: eaiingest-secrets
              key: jwt-secret
        - name: EAI_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: eaiingest-secrets
              key: encryption-key
        - name: EAI_AWS_REGION
          valueFrom:
            secretKeyRef:
              name: eaiingest-secrets
              key: aws-region
        - name: EAI_AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: eaiingest-secrets
              key: aws-access-key-id
        - name: EAI_AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: eaiingest-secrets
              key: aws-secret-access-key
        resources:
          limits:
            memory: "1Gi"
            cpu: "1000m"
          requests:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: data
          mountPath: /app/data
        - name: logs
          mountPath: /app/logs
        - name: temp
          mountPath: /app/temp
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: eaiingest-config
      - name: data
        persistentVolumeClaim:
          claimName: eaiingest-data-pvc
      - name: logs
        emptyDir: {}
      - name: temp
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      nodeSelector:
        kubernetes.io/os: linux
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - eaiingest
              topologyKey: kubernetes.io/hostname

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-proxy
  namespace: eaiingest
  labels:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/component: proxy
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx
      app.kubernetes.io/component: proxy
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx
        app.kubernetes.io/component: proxy
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        resources:
          limits:
            memory: "256Mi"
            cpu: "200m"
          requests:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nginx-config
        configMap:
          name: eaiingest-nginx-config