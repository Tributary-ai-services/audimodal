version: '3.8'

services:
  # eAIIngest main application
  eaiingest:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: eaiingest-app
    ports:
      - "8080:8080"
    environment:
      - EAI_ENV=development
      - EAI_LOG_LEVEL=info
      - EAI_DB_HOST=postgres
      - EAI_DB_PORT=5432
      - EAI_DB_NAME=eaiingest
      - EAI_DB_USER=eaiuser
      - EAI_DB_PASSWORD=eaipassword
      - EAI_REDIS_HOST=redis
      - EAI_REDIS_PORT=6379
      - EAI_JWT_SECRET=your-jwt-secret-change-in-production
      - EAI_ENCRYPTION_KEY=your-32-byte-encryption-key-here
      - EAI_STORAGE_LOCAL_PATH=/app/data/storage
      - EAI_TEMP_DIR=/app/temp
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./temp:/app/temp
    depends_on:
      - postgres
      - redis
    networks:
      - eaiingest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: eaiingest-postgres
    environment:
      - POSTGRES_DB=eaiingest
      - POSTGRES_USER=eaiuser
      - POSTGRES_PASSWORD=eaipassword
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployments/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - eaiingest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eaiuser -d eaiingest"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: eaiingest-redis
    command: redis-server --requirepass redispassword --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./deployments/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - eaiingest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MinIO for S3-compatible object storage (development)
  minio:
    image: minio/minio:latest
    container_name: eaiingest-minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - eaiingest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: eaiingest-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - eaiingest-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: eaiingest-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./deployments/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - eaiingest-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  eaiingest-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16